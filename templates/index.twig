{# templates/index.twig #}
{% extends '_layout' %}



{#
  Params
#}

{% set ticketTypes = craft.entries.section('ticketTypes').all() %}
{% set eventsList = craft.entries.section('events')
  .with(['venue', 'ticketTypes', 'artists'])
  .all()
%}
{% set artistsList = collect(eventsList).pluck('artists')
  .flatten()
  .unique()
  .keyBy('id')
  .sortBy('title', constant('SORT_NATURAL') b-or constant('SORT_FLAG_CASE'))
  .all()
%}
{% set eventSeats = craft.entries.section('eventSeats')
  .with(['event'])
  .all()
  |filter(seatsInfo => seatsInfo.event is not empty)
  |index('event.0.id')
%}



{#
  Biz logic
#}

{# Sort events by date, and by venue #}
{% set eventsList = eventsList|multisort(['startDate', 'venue.0.title']) %}

{# Figure out artist bios #}
{% set artistsList = artistsList|map(artist => artist|merge({
    bio: artist.bio ?: _self.getBioFromWikipedia(artist),
  }))
%}

{# Calculate seat info for each event #}
{% set eventsList = eventsList|map(event => event|merge({
    seatsAvailable: eventSeats[event.id].seatsAvailable
      ?? event.venue[0].seatsAvailable
      ?? false
  }))
%}



{#
  Layout
#}

{% block page_body %}
  <main class="max-w-4xl px-6 mx-auto">
    {{ block('index_artists') }}
    {{ block('index_tickets') }}
    {{ block('index_events') }}
  </main>
{% endblock %}



{#
  Render
#}

{% block index_tickets %}
  {% for ticketType in ticketTypes %}
    {% if loop.first %}
      <h3 class="uppercase text-gray-500 text-xs tracking-wider mb-3">
        Ticket Types
      </h3>
      <ul class="flex gap-1 mb-24">
    {% endif %}
        <li class="p-4 flex-1 bg-gray-100 min-h-[10rem]">
          <h4 class="font-medium mb-1 text-lg">
            {{ ticketType.title }}
          </h4>
          {{ ticketType.bio ? tag('div', {
            class: 'text-sm text-gray-500 leading-relaxed',
            html: ticketType.bio|nl2br|md,
          }) }}
        </li>
    {% if loop.last %}
      </ul> 
    {% endif %}
  {% endfor %}
{% endblock %}

{% block index_events %}
  {% set StringHelper = create('craft\\helpers\\StringHelper') %}
  
  {% for event in eventsList %}
    {% if loop.first %}
      <h3 class="uppercase text-gray-500 text-xs tracking-wider">
        Performances
      </h3>
      <ul class="divide-y divide-gray-200">
    {% endif %}
    
    <li>
      <article class="grid grid-cols-2 md:grid-cols-4 gap-2 items-center py-8">
        <div class="col-span-2">
          <div class="flex gap-1.5">
            <h2 class="text-xl font-bold mb-1">
              {{ event.title }}
            </h2>
            <details class="bg-blue-300 rounded-full w-4 h-4 text-xs self-center">
              <summary class="list-none text-center cursor-pointer text-white font-bold font-mono">i</summary>
              <div class="absolute max-w-xs p-4 bg-gray-100 shadow-md space-y-8 rounded ml-2">
                {% for artist in event.artists.all() %}
                  {% set artistBio = artistsList[artist.id].bio %}
                  {% set artistBio = artistBio|truncate(200)|md %}
                  {% set artistBio = StringHelper.replaceFirst(artistBio, artist.title, tag('strong', {
                    text: artist.title,
                    class: 'text-base font-semibold',
                  })) %}
                  
                  {% set artistWebsite = artist.website ? tag('a', {
                    class: 'text-blue-600 text-xs',
                    href: artist.website,
                    html: 'Official Website &rarr;',
                  }) %}
                  
                  {% if artistBio or artistWebsite %}
                    <div class="text-sm">
                      {{ artistBio|raw }}
                      {{ artistWebsite|raw }}
                    </div>
                  {% endif %}
                {% endfor %}
              </div>
            </details>
          </div>
          
          <p class="text-xs text-gray-500">
            <time datetime="{{ event.startDate|atom }}">
              {{ event.startDate|time('ga') }},
              {{ event.startDate|date('j M') }}
            </time>
            â€¢
            {{ event.venue.one() }}
          </p>
        </div>
        
        <div class="text-sm">
          {{ event.ticketTypes.all()|join('<br>')|raw }}
        </div>
        
        <div class="flex items-center justify-end gap-2">
          {{ event.seatsAvailable ? tag('span', {
            class: [
              'text-xs',
              event.seatsAvailable < 10 ? 'text-red-500',
              event.seatsAvailable >= 10 and event.seatsAvailable <= 50 ? 'text-amber-500',
              event.seatsAvailable > 50 ? 'text-green-500',
            ],
            text: event.seatsAvailable ~ ' seats',
          }) }}
          {{ tag('button', {
            class: [
              not event.seatsAvailable ? 'opacity-50',
              'py-1 px-2',
              'font-bold text-sm',
              'bg-gray-100 border shadow-sm rounded transition',
              event.seatsAvailable ? 'hover:bg-gray-200',
              event.seatsAvailable ? 'active:scale-95',
            ],
            disabled: not event.seatsAvailable,
            text: event.seatsAvailable ? 'Attend' : 'Fully Booked',
          }) }}
        </div>
      </article>
    </li>
    
    {% if loop.last %}
      </ul>
    {% endif %}
  {% endfor %}
{% endblock %}

{% block index_artists %}
  {% if artistsList is not empty %}
    <h3 class="uppercase text-gray-500 text-xs tracking-wider mb-3">
      All Artists
    </h3>
    <ul class="columns-3xs gap-2 mb-24 space-y-0.5">
      {% for artist in artistsList %}
        <li>
          {{ artist.website ? tag('a', {
            href: artist.website,
            text: artist.title,
            class: 'hover:underline',
          }) : artist.title }}
        </li>
      {% endfor %}
    </ul> 
  {% endif %}
{% endblock %}



{#
  Macros
#}

{# Fetch artist bio from Wikipedia #}
{% macro getBioFromWikipedia(name) %}
  {% set wikipediaPage = _self.cachedApiCall('https://en.wikipedia.org/api/rest_v1/page/summary/' ~ name, {
    headers: {
      accept: 'application/json',
      charset: 'utf-8',
      profile: 'https://www.mediawiki.org/wiki/Specs/Summary/1.4.2',
      query: { redirect: 'false' },
    },
  })|trim|json_decode %}
  {{- wikipediaPage.extract ?? '' -}}
{% endmacro %}


{# Make an API call via Guzzle #}
{% macro apiCall(url, params) %}
  {% set apiResponse = create('\\GuzzleHttp\\Client').get(url, params) %}
  
  {# Validate response #}
  {% if apiResponse.getStatusCode() == 200 %}
    {% set response = apiResponse.getBody().getContents() %}
    {{- response|raw -}}
  {% endif %}
{% endmacro %}


{# Cache the results of apiCall() #}
{% macro cachedApiCall(url, params) %}
  {% set cacheDuration = 60 * 60 * 24 * 30 %} {# 1 month #}
  {% set cacheDurationOnError = 60 * 1 %} {# 1 min #}
  {% set cacheKey = [url, params] %}
  
  {# Check cache #}
  {% set response = craft.app.cache.get(cacheKey) %}
  {% if response is same as(false) %}
    
    {# Make API call #}
    {% set response = _self.apiCall(url, params) %}
    {% if response|trim is empty %}
      {% set cacheDuration = cacheDurationOnError %}
    {% endif %}
    
    {# Cache response #}
    {% do craft.app.cache.set(cacheKey, response, cacheDuration) %}
  {% endif %}
  
  {{- response|raw -}}
{% endmacro %}
